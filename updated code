from abc import ABC, abstractmethod

class Animal(ABC):
    """Abstract base class for all animals."""

    def __init__(self, name):
        self._name = name  # Encapsulated attribute

    @abstractmethod
    def get_characteristic_question(self):
        """Abstract method to define a characteristic question."""
        pass

    @abstractmethod
    def get_fun_facts(self):
        """Abstract method to return fun facts."""
        pass

    def greet(self):
        """General greeting for all animals."""
        print(f"You selected {self._name}. Let's learn more about them!")

class Cat(Animal):
    def get_characteristic_question(self):
        return ("What unique ability do cats have?\n"
                "a) They can taste sweetness\n"
                "b) They can see in total darkness\n"
                "c) They can jump up to six times their length\n"
                "d) They can remember human faces for years"), "c"

    def get_fun_facts(self):
        return [
            "Cats can jump up to six times their length.",
            "They have 230 bones in their bodies—more than humans!",
            "Cats can't taste sweetness.",
            "A group of cats is called a clowder.",
            "They spend 70% of their lives sleeping."
        ]

class Dog(Animal):
    def get_characteristic_question(self):
        return ("What is a dog's most developed sense?\n"
                "a) Sight\n"
                "b) Smell\n"
                "c) Hearing\n"
                "d) Taste"), "b"

    def get_fun_facts(self):
        return [
            "Dogs have an incredible sense of smell, 10,000 times better than humans.",
            "They can hear frequencies up to 65,000 Hz.",
            #"A dog’s nose print is unique, much like a human fingerprint.",
            "Dogs curl up to protect their organs while sleeping.",
            "They have three eyelids!"
        ]

# Other subclasses for Dinosaur, Dolphin, Shark, Ant would follow a similar pattern.
# For brevity, here’s one more example:

class Dinosaur(Animal):
    def get_characteristic_question(self):
        return ("Which period did most dinosaurs live in?\n"
                "a) Jurassic\n"
                "b) Triassic\n"
                "c) Cretaceous\n"
                "d) Devonian"), "a"

    def get_fun_facts(self):
        return [
            "Dinosaurs existed for about 165 million years.",
            "The word 'dinosaur' means 'terrible lizard.'",
            "Some dinosaurs were herbivores, while others were carnivores.",
            "Birds are the closest living relatives to dinosaurs.",
            "The largest dinosaur, Argentinosaurus, could weigh up to 100 tons."
        ]

# Interactive Game
def start_game():
    print("Choose an animal to learn about: Cat, Dog, Dinosaur, Dolphin, Shark, Ant")
    choice = input("Enter your choice: ").strip().lower()

    animals = {
        "cat": Cat("Cat"),
        "dog": Dog("Dog"),
        "dinosaur": Dinosaur("Dinosaur"),
        # Dolphins, Sharks, and Ants would be similarly implemented
    }

    selected_animal = animals.get(choice)
    if selected_animal:
        selected_animal.greet()
        question, correct_answer = selected_animal.get_characteristic_question()
        print(question)
        answer = input("Your answer: ").strip().lower()
        if answer == correct_answer:
            print("Correct!")
        else:
            print(f"Wrong! The correct answer was {correct_answer}.")
        print("\nHere are 5 fun facts about your chosen animal:")
        for fact in selected_animal.get_fun_facts():
            print(f"- {fact}")
    else:
        print("Invalid choice. Please restart the game.")

# Run the game
start_game()
